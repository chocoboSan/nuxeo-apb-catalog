
- name: "Update last operation"
  asb_last_operation:
    description: "0%: Starting"
  when: in_cluster


- name: "ca secret state={{ state }}"
  include_tasks: "create_ca_secret.yml"
  when: state == "present" and tls_enabled

- name: "ca secret state={{ state }}"
  shell: kubectl delete --ignore-not-found=true secret {{ ca_secret_name }} -n {{ namespace }}
  when: state == "absent" and tls_enabled


# Work-around k8s_raw inability to create Secret directly
# - name: "admin secret state={{ state }}"
#   block:
#     - name: "Create admin secret from template"
#       template:
#         src: admin_secret.yml.j2
#         dest: /tmp/admin_secret.yml

#     - name: "Create admin secret"
#       shell: kubectl create --filename=/tmp/admin_secret.yml
#   when: state == "present" and auth_enabled and auth_existingAdminSecret is undefined

# - name: "admin secret state={{ state }}"
#   shell: kubectl delete --ignore-not-found=true secret {{ admin_secret_name }} -n {{ namespace }}
#   when: state == "absent" and auth_enabled and auth_existingAdminSecret is undefined


# # Work-around k8s_raw inability to create Secret directly
# - name: "user secret state={{ state }}"
#   block:
#     - name: "Create user secret from template"
#       template:
#         src: user_secret.yml.j2
#         dest: /tmp/user_secret.yml

#     - name: "Create user secret"
#       shell: kubectl create --filename=/tmp/user_secret.yml
#   when: state == "present" and auth_enabled and auth_existingUserSecret is undefined

# - name: "user secret state={{ state }}"
#   shell: kubectl delete --ignore-not-found=true secret {{ user_secret_name }} -n {{ namespace }}
#   when: state == "absent" and auth_enabled and auth_existingUserSecret is undefined


# Work-around k8s_raw inability to create ConfigMap directly
# - name: "init container config map state={{ state }}"
#   block:
#     - name: "Create init container config from template"
#       template:
#         src: init_configmap.yml.j2
#         dest: /tmp/init_configmap.yml

#     - name: "Create init container config map"
#       shell: kubectl create --filename=/tmp/init_configmap.yml
#   when: state == "present"

# - name: "init container config map state={{ state }}"
#   shell: kubectl delete --ignore-not-found=true configmap {{ init_configmap_name }} -n {{ namespace }}
#   when: state == "absent"

#
#- name: "init container config map state={{ state }}"
#  k8s_raw:
#    state: '{{ state }}'
#    definition: "{{ lookup('template', 'init_configmap.yml.j2') | from_yaml }}"
#
# End Work-around


# Work-around k8s_raw inability to create ConfigMap directly
# - name: "kafka container config map state={{ state }}"
#   block:
#     - name: "Create kafka container config from template"
#       template:
#         src: kafka_configmap.yml.j2
#         dest: /tmp/kafka_configmap.yml

#     - name: "Create kafka container config map"
#       shell: kubectl create --filename=/tmp/kafka_configmap.yml
#   when: state == "present"

# - name: "kafka container config map state={{ state }}"
#   shell: kubectl delete --ignore-not-found=true configmap {{ kafka_configmap_name }} -n {{ namespace }}
#   when: state == "absent"


# Work-around k8s_raw inability to create PodDisruptionBudget directly
- name: "Zookeeper poddisruptionbudget state={{ state }}"
  block:
    - name: "Create Zookeeper poddisruptionbudget from template"
      template:
        src: zookeeper_poddisruptionbudget.yml.j2
        dest: /tmp/zookeeper_poddisruptionbudget.yml

    - name: "Create Zookeeper poddisruptionbudget"
      shell: kubectl create --filename=/tmp/zookeeper_poddisruptionbudget.yml
  when: state == "present" and podDisruptionBudget is defined and (podDisruptionBudget | from_yaml)

- name: "poddisruptionbudget state={{ state }}"
  shell: kubectl delete --ignore-not-found=true poddisruptionbudget {{ zookeeper_name }} -n {{ namespace }}
  when: state == "absent" and podDisruptionBudget is defined and (podDisruptionBudget | from_yaml)


#- name: "poddisruptionbudget state={{ state }}"
#  k8s_raw:
#    state: '{{ state }}'
#    definition: "{{ lookup('template', 'poddisruptionbudget.yml.j2') | from_yaml }}"
#  when podDisruptionBudget is defined and (podDisruptionBudget | from_yaml)
# End of work-around


# Work-around k8s_raw refusal to create service with clusterIP: None
- name: "Zookeeper service state={{ state }}"
  block:
    - name: "Create Zookeeper service from template"
      template:
        src: zookeeper_service.yml.j2
        dest: /tmp/zookeeper_service.yml

    - name: "Create Zookeeper service"
      shell: kubectl create --filename=/tmp/zookeeper_service.yml
  when: state == "present"

- name: "Zookeeper service state={{ state }}"
  shell: kubectl delete --ignore-not-found=true service {{ zookeeper_name }} -n {{ namespace }}
  when: state == "absent"

# Work-around k8s_raw refusal to create service with clusterIP: None
- name: "Zookeeper headless service state={{ state }}"
  block:
    - name: "Create Zookeeper headless service from template"
      template:
        src: zookeeper_service-headless.yml.j2
        dest: /tmp/zookeeper_service-headless.yml

    - name: "Create Zookeeper headless service"
      shell: kubectl create --filename=/tmp/zookeeper_service-headless.yml
  when: state == "present"

- name: "Zookeeper headless service state={{ state }}"
  shell: kubectl delete --ignore-not-found=true service {{ zookeeper_name }}-headless -n {{ namespace }}
  when: state == "absent"




# - name: "set fact statefulset pvcs state={{ state }}"
#   include_tasks: "set_fact_statefulset_pvcs.yml"
#   when: state == "absent"


# Work-around k8s_raw inability to create StatefulSet directly
- name: "Zookeeper statefulset state={{ state }}"
  block:
    - name: "Create Zookeeper statefulset from template"
      template:
        src: zookeeper_statefulset.yml.j2
        dest: /tmp/zookeeper_statefulset.yml
    - name: "Create Zookeeper statefulset"
      shell: kubectl create --filename=/tmp/zookeeper_statefulset.yml
  when: state == "present"


- name: "Zookeeper statefulset state={{ state }}"
  shell: kubectl delete --ignore-not-found=true statefulset {{ zookeeper_name }} -n {{ namespace }}
  when: state == "absent"

#- name: "statefulset state={{ state }}"
#  k8s_raw:
#    state: '{{ state }}'
#    definition: "{{ lookup('template', 'statefulset.yml.j2') | from_yaml }}"
# End of work-around


# - name: "statefulset persistentvolumeclaims state={{ state }}"
#   shell: kubectl delete --ignore-not-found=true persistentvolumeclaim {{ item }} -n {{ namespace }}
#   with_items: "{{ statefulset_pvcs }}"
#   when: state == "absent"


- name: "Update last operation"
  asb_last_operation:
    description: "50%: Cluster objects state={{ state }}"
  when: in_cluster

- include_tasks: "verify_{{ apb_action }}.yml"

- name: encode bind credentials
  asb_encode_binding:
    fields:
      uri: "{{ service_uri }}"
      tls_cacert: "{{ tls_cacert_lookup | b64encode }}"
  when: state == "present"


- name: "Update last operation"
  asb_last_operation:
    description: "100%: Done"
  when: in_cluster
