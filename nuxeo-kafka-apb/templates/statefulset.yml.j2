apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: {{ name }}
    apb_name: '{{ apb_name }}'
    apb_plan_id: '{{ _apb_plan_id }}'
    apb_service_class_id: '{{ _apb_service_class_id }}'
    apb_service_instance_id: '{{ _apb_service_instance_id }}'
    component: {{ component }}
  name: {{ name }}
  namespace: {{ namespace }}
spec:
  selector:
    matchLabels:
      app: {{ name }}
      component: {{ component }}
  serviceName: {{ name }}
  replicas: {{ replicas }}

  updateStrategy:
    type: {{ updateStrategy_type }}
  template:
    metadata:
      labels:
        app: {{ name }}
        component: {{ component }}
{% if podLabels is defined and (podLabels | from_yaml) %}
{{ podLabels | from_yaml | to_nice_yaml(indent=2) | indent(8, true) }}
{% endif %}
{% if podAnnotations is defined and (podAnnotations | from_yaml) %}
      annotations:
{{ podAnnotations | from_yaml | to_nice_yaml(indent=2) | indent(8, true) }}
{% endif %}
    spec:
      terminationGracePeriodSeconds: {{ terminationGracePeriodSeconds }}
{% if securityContext is defined and (securityContext | from_yaml) %}
      securityContext:
{{ securityContext | from_yaml | to_nice_yaml(indent=2) | indent(8, true) }}
{% endif %}
{% if nodeSelector is defined and (nodeSelector | from_yaml) %}
      nodeSelector:
{{ nodeSelector | from_yaml | to_nice_yaml(indent=2) | indent(8, true) }}
{% endif %}
{% if affinity is defined and (affinity | from_yaml) %}
      affinity:
{{ affinity | from_yaml | to_nice_yaml(indent=2) | indent(8, true) }}
{% endif %}
{% if tolerations is defined and (tolerations | from_yaml) %}
      tolerations:
{{ tolerations | from_yaml | to_nice_yaml(indent=2) | indent(8, true) }}
{% endif %}

      initContainers:
{% if tls_enabled %}
      - name: "create-certs"
        image: {{ image_repository }}:{{ image_tag }}
        imagePullPolicy: "{{ image_pullPolicy }}"
        env:
        - name: DN_SUFFIX
          value: "{{ tls_casubjectDistinguishedNameSuffix |replace("/", ",")}}"
        command:
            - "sh"
        args:
          - "-c"
          - |
            set -x
            bash /opt/kakfa/init/init-certs.sh
        securityContext:
          runAsUser: 0
        volumeMounts:
        - mountPath: /opt/kafka/init
          name: config-init
        - mountPath: /caroot
          name: certs
        - mountPath: /etc/kafa/secrets
          name: sslcerts
{% endif %}

      containers:
        - name: kafka-broker
          image: "{{ image_repository }}:{{ image_tag }}"
          imagePullPolicy: "{{ image_pullPolicy }}"
          ports:
            - containerPort: 9092
              name: kafka
          resources:
{% if resources is defined and (resources | from_yaml) %}
{{ resources | from_yaml | to_nice_yaml(indent=2) | indent(12, true) }}
{% endif %}
          env:
{% if extraVars is defined and (extraVars | from_yaml) %}
{{ extraVars | from_yaml | to_nice_yaml(indent=2) | indent(12, true) }}
{% endif %}
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: ZOOKEEPER_SERVER_COUNT
            value: '{{ zookeeper_replicas }}'
          - name: ZOOKEEPER_CLIENT_PORT
            value: '{{ zookeeper_ports_client_containerPort }}'
          - name: KAFKA_HEAP_OPTS
            value: '{{ kafkaHeapOptions }}'
          - name: KAFKA_DATA_DIRS
            value: /opt/kafka/data
{% if tls_enabled %}
          - name: KAFKA_SSL_KEYSTORE_CREDENTIALS
            value: "keystore_credential"
          - name: KAFKA_SSL_KEY_CREDENTIALS
            value: "key_credential"
          - name: KAFKA_SSL_TRUSTSTORE_FILENAME
            value: "kafka.truststore.jks"
          - name: KAFKA_SSL_TRUSTSTORE_CREDENTIALS
            value: "truststore_credential"
          - name: KAFKA_OPTS
            value: -Djava.security.auth.login.config=/etc/kafka/secrets/jaas.conf
          - name: ZOOKEEPER_SASL_ENABLED
            value: "false"
          - name: KAFKA_SASL_ENABLED_MECHANISMS
            value: PLAIN
          - name: KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL
            value: PLAIN

{% endif %}
          command:
          - /bin/bash
          - -exc
          - |
            export KAFKA_ZOOKEEPER_CONNECT=$(DOMAIN=`hostname -d`; \
                for ((i=0; i<$ZOOKEEPER_SERVER_COUNT; i++)); do \
                    echo -n "{{ zookeeper_name }}-headless-$i.$DOMAIN:$ZOOKEEPER_CLIENT_PORT,"; \
                done| sed 's/,$//'| sed 's/kafka/zookeeper/g') && \
            export KAFKA_BROKER_ID=${HOSTNAME##*-} && \
            export KAFKA_SSL_KEYSTORE_FILENAME=kafka.broker${KAFKA_BROKER_ID}.keystore.jks
            export NODEPORT=$(expr 31092 + $KAFKA_BROKER_ID) && \
            export KAFKA_LISTENERS=PLAINTEXT://${POD_IP}:9092 && \
            export KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://${POD_IP}:9092 && \
            /etc/confluent/docker/run
          livenessProbe:
            tcpSocket:
              port: 9092
            initialDelaySeconds: {{ livenessProbe_initialDelaySeconds }}
            timeoutSeconds: {{ livenessProbe_timeoutSeconds }}
            failureThreshold: {{ livenessProbe_failureThreshold }}
            periodSeconds: {{ livenessProbe_periodSeconds }}
            successThreshold: {{ livenessProbe_successThreshold }}
          readinessProbe:
            exec:
              command:
              - /bin/bash
              - -exc
              - |
                export KAFKA_ZOOKEEPER_CONNECT=$(DOMAIN=`hostname -d`; \
                    for ((i=0; i<$ZOOKEEPER_SERVER_COUNT; i++)); do \
                        echo -n "{{ name }}-$i.$DOMAIN:$ZOOKEEPER_CLIENT_PORT,"; \
                    done| sed 's/,$//'| sed 's/kafka/zookeeper/g') && \
                (kafka-topics --zookeeper ${KAFKA_ZOOKEEPER_CONNECT} --list)
            initialDelaySeconds: {{ readinessProbe_initialDelaySeconds }}
            timeoutSeconds: {{ readinessProbe_timeoutSeconds }}
            failureThreshold: {{ readinessProbe_failureThreshold }}
            periodSeconds: {{ readinessProbe_periodSeconds }}
            successThreshold: {{ readinessProbe_successThreshold }}
          volumeMounts:
          - name: datadir
            mountPath: /opt/kafka/data
{% if tls_enabled %}
          - name: sslcerts
            mountPath: /etc/kafa/secrets
{% endif %}
      volumes:
{% if tls_enabled %}
      - name: certs
        secret:
          secretName: {{ ca_secret_name }}
      - name: config-init
        configMap:
          name: {{ init_configmap_name }}
      - name: sslcerts
        emptyDir: {}
{% endif %}
  volumeClaimTemplates:
    - metadata:
        name: datadir
{% if persistentVolume_annotations is defined and (persistentVolume_annotations | from_yaml) %}
        annotations:
{{ persistentVolume_annotations | from_yaml | to_nice_yaml(indent=2) | indent(12, true) }}
{% endif %}
      spec:
        accessModes:
          - {{ persistentVolume_accessMode }}
        resources:
          requests:
            storage: {{ persistentVolume_size | quote }}
{% if persistentVolume_storageClass is defined and (persistentVolume_storageClass | trim | length) > 0 %}
{% if '-' == persistentVolume_storageClass %}
        storageClassName: ""
{% else %}
        storageClassName: "{{ persistentVolume_storageClass }}"
{% endif %}
{% endif %}
