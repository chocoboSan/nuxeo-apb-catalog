---

- name: Set MongoDB statefulset to {{ state }}
  k8s_v1beta2_stateful_set:
    namespace: '{{ namespace }}'
    name: "{{ NUXEO_BACKINGS_NAME }}-mongodb"
    labels:
      app: "{{ NUXEO_BACKINGS_NAME }}"
      component: mongodb          

    spec_selector_match_labels:
      app: "{{ NUXEO_BACKINGS_NAME }}"
      component: mongodb
    spec_service_name: "{{ NUXEO_BACKINGS_NAME }}-mongodb"
    spec_replicas: "{{ MONGODB_REPLICAS_NUMBER }}"
    spec_template_metadata_labels:
      app: "{{ NUXEO_BACKINGS_NAME }}"
      component: mongodb
    init_containers:
      - name: copy-config
        image: busybox
        command:
          - "sh"
        args:
          - "-c"
          - |
            set -e
            set -x

            cp /configdb-readonly/mongod.conf /data/configdb/mongod.conf
            

        volumeMounts:
          - name: workdir
            mountPath: /work-dir
          - name: config
            mountPath: /configdb-readonly
          - name: configdir
            mountPath: /data/configdb
      - name: install
        image: k8s.gcr.io/mongodb-install:0.6  
        args:
          - --work-dir=/work-dir
        imagePullPolicy: "Always"
        volumeMounts:
          - name: workdir
            mountPath: /work-dir
      - name: bootstrap
        image: "{{ IMAGE_REPOSITORY }}:{{IMAGE_TAG}}"
        command:
          - /work-dir/peer-finder
        args:
          - -on-start=/init/on-start.sh
          - "-service={{ NUXEO_BACKINGS_NAME }}-mongodb"
        imagePullPolicy: "Always"
        env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: REPLICA_SET
            value: "{{ MONGODB_REPLICASET_NAME }}"
          - name: AUTH
            value: "false"
        volumeMounts:
          - name: workdir
            mountPath: /work-dir
          - name: init
            mountPath: /init
          - name: configdir
            mountPath: /data/configdb
          - name: data
            mountPath: /data/db
    containers:
      - name: "{{ MONGODB_REPLICASET_NAME}}"
        image: "{{ IMAGE_REPOSITORY }}:{{IMAGE_TAG}}"
        imagePullPolicy: "Always"          
        ports:
          - name: peer
            containerPort: 27017
        resources:
           limits:
             cpu: 500m
             memory: 512Mi
           requests:
             cpu: 100m
             memory: 256Mi
        command:
          - mongod
        args:
          - --config=/data/configdb/mongod.conf
          - --dbpath=/data/db
          - --replSet={{ MONGODB_REPLICASET_NAME}}
          - --port=27017
          - --bind_ip 
          - "0.0.0.0"
        livenessProbe:
          exec:
            command:
              - mongo
              - --eval
              - "db.adminCommand('ping')"
          initialDelaySeconds: 5
          timeoutSeconds: 1
          failureThreshold: 3
          periodSeconds: 10
          successThreshold: 1
        readinessProbe:
          exec:
            command:
              - mongo
              - --eval
              - "db.adminCommand('ping')"
          initialDelaySeconds: 5
          timeoutSeconds: 1
          failureThreshold: 3
          periodSeconds: 10
          successThreshold: 1
        volumeMounts:
          - name: data
            mountPath: /data/db
          - name: configdir
            mountPath: /data/configdb
          - name: workdir
            mountPath: /work-dir      
    volumes:
      - name: config
        configMap:
          name: "{{ NUXEO_BACKINGS_NAME}}-mongodb-config"
      - name: init
        configMap:
          defaultMode: 0755
          name: "{{ NUXEO_BACKINGS_NAME}}-mongodb-init"
      - name: workdir
        emptyDir: {}
      - name: configdir
        emptyDir: {}

    volume_claim_templates:
      - metadata:
          name: data          
        spec:
          accessModes:          
            - "ReadWriteOnce"
          resources:
            requests:
              storage: "{{ MONGODB_STORAGE_SIZE }}"
          storageClassName: "{{ MONGODB_STORAGE_CLASS }}"
    state: "{{ state }}"
  when: secured == false
