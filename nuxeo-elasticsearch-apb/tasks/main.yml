---

- name: "Update last operation"
  asb_last_operation:
    description: "0%: Starting"
  when: in_cluster

# These can always be overridden at the command line
# http://docs.ansible.com/ansible/devel/user_guide/playbooks_variables.html#variable-precedence-where-should-i-put-a-variable
#- name: 'Set facts'
#  set_fact:
#    cluster: '{{ "openshift" if "openshift" in lookup("k8s", cluster_info="version") else "kubernetes" }}'

- include_tasks: os-prerequisites.yml
  when: cluster == "openshift"

- include_tasks: secured-prerequisites.yml
  when: use_searchguard


# Work-around k8s_raw inability to create ConfigMap directly
- name: "Elasticsearch client config map state={{ state }}"
  block:
    - name: "Create Elasticsearch conf from template"
      template:
        src: elasticsearch.yml.j2
        dest: /tmp/elasticsearch.yml

    - name: "Create JVM options from template"
      template:
        src: jvm.options.j2
        dest: /tmp/client-jvm.options
      vars:
        java_opts: "{{ client_java_opts }}"

    - name: "Create Elasticsearch client config from template"
      template:
        src: config.yml.j2
        dest: /tmp/client-config.yml
      vars:
        - elasticsearch_conf_path: /tmp/elasticsearch.yml
        - jvm_options_path: /tmp/client-jvm.options
        - configmap_name: "{{ client_configmap_name }}"

    - name: "Create Elasticsearch client config map"
      shell: kubectl create --filename=/tmp/client-config.yml
  when: state == "present"

- name: "Elasticsearch client config map state={{ state }}"
  shell: kubectl delete --ignore-not-found=true configmap {{ client_configmap_name }} -n {{ namespace }}
  when: state == "absent"


# Work-around k8s_raw inability to create ConfigMap directly
- name: "Elasticsearch master config map state={{ state }}"
  block:
    - name: "Create Elasticsearch conf from template"
      template:
        src: elasticsearch.yml.j2
        dest: /tmp/elasticsearch.yml

    - name: "Create JVM options from template"
      template:
        src: jvm.options.j2
        dest: /tmp/master-jvm.options
      vars:
        java_opts: "{{ master_java_opts }}"

    - name: "Create Elasticsearch master config from template"
      template:
        src: config.yml.j2
        dest: /tmp/master-config.yml
      vars:
        - elasticsearch_conf_path: /tmp/elasticsearch.yml
        - jvm_options_path: /tmp/master-jvm.options
        - configmap_name: "{{ master_configmap_name }}"

    - name: "Create Elasticsearch master config map"
      shell: kubectl create --filename=/tmp/master-config.yml
  when:
    - state == "present"
    - clustered


- name: "Elasticsearch master config map state={{ state }}"
  shell: kubectl delete --ignore-not-found=true configmap {{ master_configmap_name }} -n {{ namespace }}
  when:
    - state == "absent"
    - clustered

# Work-around k8s_raw inability to create ConfigMap directly
- name: "Elasticsearch data config map state={{ state }}"
  block:
    - name: "Create ca secret from template"
      template:
        src: elasticsearch.yml.j2
        dest: /tmp/elasticsearch.yml

    - name: "Create JVM options from template"
      template:
        src: jvm.options.j2
        dest: /tmp/data-jvm.options
      vars:
        java_opts: "{{ data_java_opts }}"

    - name: "Create Elasticsearch data config from template"
      template:
        src: config.yml.j2
        dest: /tmp/data-config.yml
      vars:
        - elasticsearch_conf_path: /tmp/elasticsearch.yml
        - jvm_options_path: /tmp/data-jvm.options
        - configmap_name: "{{ data_configmap_name }}"

    - name: "Create Elasticsearch data config map"
      shell: kubectl create --filename=/tmp/data-config.yml
  when:
    - state == "present"
    - clustered

- name: "Elasticsearch data config map state={{ state }}"
  shell: kubectl delete --ignore-not-found=true configmap {{ data_configmap_name }} -n {{ namespace }}
  when:
    - state == "absent"
    - clustered





# Work-around k8s_raw refusal to create service with clusterIP: None
- name: "Elasticsearch Client service state={{ state }}"
  block:
    - name: "Create Elasticsearch Client service from template"
      template:
        src: service.yml.j2
        dest: /tmp/service-client.yml
      vars:
        ports:
        - name: http
          port: 9200
          targetPort: http
        - name: transport
          port: 9300
          targetPort: transport
        role: client
        service_name: "{{service_client_name}}"

    - name: "Create Client service"
      shell: kubectl create --filename=/tmp/service-client.yml
  when:
    - state == "present"
    - clustered

- name: "Elasticsearch Client service state={{ state }}"
  shell: kubectl delete --ignore-not-found=true service {{ service_client_name }} -n {{ namespace }}
  when:
    - state == "absent"
    - clustered

# Work-around k8s_raw refusal to create service with clusterIP: None
- name: "Elasticsearch Client service state={{ state }}"
  block:
    - name: "Create Elasticsearch Client service from template"
      template:
        src: service.yml.j2
        dest: /tmp/service-client.yml
      vars:
        ports:
        - name: http
          port: 9200
          targetPort: http
        - name: transport
          port: 9300
          targetPort: transport
        role: data
        service_name: "{{service_client_name}}"

    - name: "Create Client service"
      shell: kubectl create --filename=/tmp/service-client.yml
  when:
    - state == "present"
    - singlenode

- name: "Elasticsearch Client service state={{ state }}"
  shell: kubectl delete --ignore-not-found=true service {{ service_client_name }} -n {{ namespace }}
  when:
    - state == "absent"
    - singlenode



# Work-around k8s_raw refusal to create service with clusterIP: None
- name: "Elasticsearch Master service state={{ state }}"
  block:
    - name: "Create Elasticsearch Master service from template"
      template:
        src: service.yml.j2
        dest: /tmp/service-master.yml
      vars:
        ports:
        - name: transport
          port: 9300
          targetPort: transport
        role: master
        service_name: "{{service_master_name}}"

    - name: "Create Master service"
      shell: kubectl create --filename=/tmp/service-master.yml
  when:
    - state == "present"
    - clustered

- name: "Elasticsearch Master service state={{ state }}"
  shell: kubectl delete --ignore-not-found=true service {{ service_master_name }} -n {{ namespace }}
  when:
    - state == "absent"
    - clustered



# Work-around k8s_raw refusal to create service with clusterIP: None
- name: "Elasticsearch Service Account state={{ state }}"
  block:
    - name: "Create Elasticsearch Service Account from template"
      template:
        src: serviceaccount.yml.j2
        dest: /tmp/serviceaccount.yml

    - name: "Create Service Account"
      shell: kubectl create --filename=/tmp/serviceaccount.yml -n {{ namespace }}

  when:
    - state == "present"
    - not elasticsearch_serviceaccount_lookup

- name: "Give ES account the ES SCC "
  shell: oc adm policy add-scc-to-user es-scc system:serviceaccount:{{ namespace }}:{{ elasticsearch_serviceaccount_name }}
  when: cluster == "openshift"

- name: "Elasticsearch Service Account state={{ state }}"
  shell: kubectl delete --ignore-not-found=true serviceaccount {{ elasticsearch_serviceaccount_name }} -n {{ namespace }}
  when: state == "absent"

- name: "set fact statefulset pvcs state={{ state }}"
  include_tasks: "set_fact_statefulset_pvcs.yml"
  when: state == "absent"

# Work-around k8s_raw inability to create StatefulSet directly
- name: "Elasticsearch master nodes statefulset state={{ state }}"
  block:
    - name: "Create Elasticsearch master nodes statefulset from template"
      template:
        src: statefulset.yml.j2
        dest: /tmp/statefulset-master.yml
      vars:
        statefulset_name: "{{ statefulset_master_name }}"
        role: master
        resources: "{{ master_resources }}"
        service_name: "{{ service_master_name }}"
        replicas: "{{ master_replica_count }}"
        node_data: "false"
        node_ingest: "false"
        node_master: "true"
        configmap_name: "{{ master_configmap_name }}"
        storage_size: "{{ master_persistence_size }}"
        storage_class: "{{ master_persistence_storage_class_name }}"
    - name: "Create Elasticsearch master nodes statefulset"
      shell: kubectl create --filename=/tmp/statefulset-master.yml
  when:
    - state == "present"
    - clustered

- name: "Elasticsearch master nodes statefulset state={{ state }}"
  shell: kubectl delete --ignore-not-found=true statefulset {{ statefulset_master_name }} -n {{ namespace }}
  when:
    - state == "absent"
    - clustered


# Work-around k8s_raw inability to create StatefulSet directly
- name: "Elasticsearch data nodes statefulset state={{ state }}"
  block:
    - name: "Create Elasticsearch data nodes statefulset from template"
      template:
        src: statefulset.yml.j2
        dest: /tmp/statefulset-data.yml
      vars:
        statefulset_name: "{{ statefulset_data_name }}"
        role: data
        resources: "{{ data_resources }}"
        service_name: "{{ service_master_name }}"
        replicas: "{{ data_replica_count }}"
        node_data: "true"
        node_ingest: "true"
        node_master: "false"
        configmap_name: "{{ data_configmap_name }}"
        storage_size: "{{ data_persistence_size }}"
        storage_class: "{{ data_persistence_storage_class_name }}"
    - name: "Create Elasticsearch data nodes statefulset"
      shell: kubectl create --filename=/tmp/statefulset-data.yml
  when:
    - state == "present"
    - clustered

- name: "Elasticsearch data nodes statefulset state={{ state }}"
  shell: kubectl delete --ignore-not-found=true statefulset {{ statefulset_data_name }} -n {{ namespace }}
  when:
    - state == "absent"
    - clustered


# Work-around k8s_raw inability to create StatefulSet directly
- name: "Elasticsearch client nodes statefulset state={{ state }}"
  block:
    - name: "Create Elasticsearch client nodes statefulset from template"
      template:
        src: statefulset.yml.j2
        dest: /tmp/statefulset-client.yml
      vars:
        statefulset_name: "{{ statefulset_client_name }}"
        role: client
        service_name: "{{ service_client_name }}"
        resources: "{{ client_resources }}"
        replicas: "{{ client_replica_count }}"
        node_data: "false"
        node_ingest: "false"
        node_master: "false"
        configmap_name: "{{ client_configmap_name }}"
    - name: "Create Elasticsearch client nodes statefulset"
      shell: kubectl create --filename=/tmp/statefulset-client.yml
  when:
    - state == "present"
    - clustered


# Work-around k8s_raw inability to create StatefulSet directly
- name: "Elasticsearch single nodes statefulset state={{ state }}"
  block:
    - name: "Create Elasticsearch client nodes statefulset from template"
      template:
        src: statefulset.yml.j2
        dest: /tmp/statefulset-client.yml
      vars:
        statefulset_name: "{{ statefulset_client_name }}"
        role: data
        service_name: "{{ service_client_name }}"
        resources: "{{ client_resources }}"
        replicas: "1"
        node_data: "true"
        node_ingest: "true"
        node_master: "true"
        configmap_name: "{{ client_configmap_name }}"
        minimum_master_nodes: "1"
        expected_master_nodes: "1"
        storage_size: "{{ data_persistence_size }}"
        storage_class: "{{ data_persistence_storage_class_name }}"
    - name: "Create Elasticsearch client nodes statefulset"
      shell: kubectl create --filename=/tmp/statefulset-client.yml
  when:
    - state == "present"
    - singlenode

- name: "Elasticsearch client nodes statefulset state={{ state }}"
  shell: kubectl delete --ignore-not-found=true statefulset {{ statefulset_client_name }} -n {{ namespace }}
  when:
    - state == "absent"


- name: Configure SearchGuard
  shell: kubectl exec {{ name }}-master-0  -n {{ namespace }} -- sh /usr/share/elasticsearch/plugins/search-guard-5/tools/sgadmin.sh -cd /usr/share/elasticsearch/config/searchguard -icl -nhnv -ts /usr/share/elasticsearch/config/searchguard-ssl/truststore.p12 -tspass changeit -ks /usr/share/elasticsearch/config/searchguard-ssl/admin_keystore.p12 -kspass changeit -tst PKCS12
  register: searchguard_config
  retries: 10
  delay: 10
  until: searchguard_config.rc == 0
  when:
    - state == "present"
    - use_searchguard


- name: "statefulset persistentvolumeclaims state={{ state }}"
  shell: kubectl delete --ignore-not-found=true persistentvolumeclaim {{ item }} -n {{ namespace }}
  with_items: "{{ statefulset_pvcs }}"
  when: state == "absent"



- name: "Update last operation"
  asb_last_operation:
    description: "50%: Cluster objects state={{ state }}"
  when: in_cluster


- include_tasks: "verify_{{ apb_action }}.yml"



- name: encode bind credentials
  asb_encode_binding:
    fields:
      uri: "https://{{ service_client_name }}.{{namespace}}.svc.cluster.local:9200"
      username: "{{ elastic_user_name }}"
      password: "{{ elastic_password }}"
      clustername: "{{ cluster_name }}"
      tls_cacert: "{{ tls_cacert_lookup | b64encode }}"
  when:
    - in_cluster
    - state == "present"
    - use_searchguard

- name: encode bind credentials
  asb_encode_binding:
    fields:
      uri: "http://{{ service_client_name }}.{{namespace}}.svc.cluster.local:9200"
      clustername: "{{ cluster_name }}"
  when:
    - in_cluster
    - state == "present"
    - not use_searchguard


- name: "Update last operation"
  asb_last_operation:
    description: "100%: Done"
  when: in_cluster
