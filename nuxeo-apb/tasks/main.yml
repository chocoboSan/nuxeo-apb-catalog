
- name: "Update last operation"
  asb_last_operation:
    description: "0%: Starting"
  when: in_cluster

# Work-around k8s_raw inability to create Secret directly
- name: "Admin user secret state={{ state }}"
  block:
    - name: "Create Admin user secret from template"
      template:
        src: admin_secret.yml.j2
        dest: /tmp/admin_secret.yml

    - name: "Create Admin secret"
      shell: kubectl create --filename=/tmp/admin_secret.yml
  when: state == "present" and auth_existingAdminSecret is undefined

- name: "admin secret state={{ state }}"
  shell: kubectl delete --ignore-not-found=true secret {{ admin_secret_name }} -n {{ namespace }}
  when: state == "absent" and auth_existingAdminSecret is undefined


# Work-around k8s_raw inability to create Secret directly
- name: "Connect secret state={{ state }}"
  block:
    - name: "Create Connect secret from template"
      template:
        src: connect_secret.yml.j2
        dest: /tmp/connect_secret.yml

    - name: "Create user secret"
      shell: kubectl create --filename=/tmp/connect_secret.yml
  when: state == "present" and connectEnabled and auth_existingUserSecret is undefined

- name: "user secret state={{ state }}"
  shell: kubectl delete --ignore-not-found=true secret {{ connect_secret_name }} -n {{ namespace }}
  when: state == "absent" and connectEnabled and existingConnnectSecret is undefined


# Work-around k8s_raw inability to create ConfigMap directly
- name: "Nuxeo container config map state={{ state }}"
  block:
    - name: "Create Nuxeo container config from template"
      template:
        src: nuxeo_config.yml.j2
        dest: /tmp/nuxeo_config.yml

    - name: "Create Nuxeo container config map"
      shell: kubectl create --filename=/tmp/nuxeo_config.yml
  when: state == "present"

- name: "Nuxeo container config map state={{ state }}"
  shell: kubectl delete --ignore-not-found=true configmap {{ init_configmap_name }} -n {{ namespace }}
  when: state == "absent"


# Work-around k8s_raw refusal to create service with clusterIP: None
- name: "Nuxeo service state={{ state }}"
  block:
    - name: "Create Nuxeo service from template"
      template:
        src: nuxeo_service.yml.j2
        dest: /tmp/nuxeo_service.yml

    - name: "Create service"
      shell: kubectl create --filename=/tmp/nuxeo_service.yml
  when: state == "present"

- name: "Nuxeo service state={{ state }}"
  k8s_raw:
    state: '{{ state }}'
    definition: "{{ lookup('template', 'nuxeo_service.yml.j2') | from_yaml }}"
  when: state == "absent"



# Work-around k8s_raw inability to create ConfigMap directly
- name: "Nuxeo route state={{ state }}"
  block:
    - name: "Create Nuxeo route from template"
      template:
        src: nuxeo_route.yml.j2
        dest: /tmp/nuxeo_route.yml

    - name: "Create Nuxeo route"
      shell: oc create --filename=/tmp/nuxeo_route.yml
  when: 
    - cluster == "openshift"
    - state == "present"

- name: "Nuxeo route state={{ state }}"
  shell: oc delete --ignore-not-found=true route {{ route_name }} -n {{ namespace }}
  when:
    - cluster == "openshift"
    - state == "absent"


- name: "Nuxeo binaries PVC state={{ state }}"
  block:
    - name: "Create Nuxeo binaries PVC from template"
      template:
        src: binaries_pvc.yml.j2
        dest: /tmp/binaries_pvc.yml

    - name: "Create binaries PVC"
      shell: kubectl create --filename=/tmp/binaries_pvc.yml
  when:
    - binaries_usePVC
    - state == "present"

- name: "Nuxeo binaries PVC state={{ state }}"
  shell: kubectl delete --ignore-not-found=true pvc {{ binaries_pvc_name }} -n {{ namespace }}
  when: 
    - binaries_usePVC
    - state == "absent"


- name: "Nuxeo Transient store PVC state={{ state }}"
  block:
    - name: "Create Transient store PVC from template"
      template:
        src: transient_pvc.yml.j2
        dest: /tmp/transient_pvc.yml

    - name: "Create Transient store PVC"
      shell: kubectl create --filename=/tmp/transient_pvc.yml
  when:
    - transientstore_usePVC
    - state == "present"

- name: "Nuxeo Transient store PVC state={{ state }}"
  shell: kubectl delete --ignore-not-found=true pvc {{ transientstore_pvc_name }} -n {{ namespace }}
  when:
    - transientstore_usePVC
    - state == "absent"


- name: "Nuxeo Data PVC state={{ state }}"
  block:
    - name: "Create Data PVC from template"
      template:
        src: data_pvc.yml.j2
        dest: /tmp/data_pvc.yml

    - name: "Create Data PVC"
      shell: kubectl create --filename=/tmp/data_pvc.yml
  when:
    - data_usePVC
    - state == "present"

- name: "Nuxeo Data PVC state={{ state }}"
  shell: kubectl delete --ignore-not-found=true pvc {{ data_pvc_name }} -n {{ namespace }}
  when:
    - data_usePVC
    - state == "absent"

- name: "Nuxeo Log PVC state={{ state }}"
  block:
    - name: "Create Log PVC from template"
      template:
        src: log_pvc.yml.j2
        dest: /tmp/log_pvc.yml

    - name: "Create Log PVC"
      shell: kubectl create --filename=/tmp/log_pvc.yml
  when:
    - log_usePVC
    - state == "present"

- name: "Nuxeo Log PVC state={{ state }}"
  shell: kubectl delete --ignore-not-found=true pvc {{ log_pvc_name }} -n {{ namespace }}
  when:
    - log_usePVC
    - state == "absent"


- name: "Nuxeo Deployment Config interactive state={{ state }}"
  block:
    - name: "Create Nuxeo Deployment config from template"
      template:
        src: nuxeo_dc.yml.j2
        dest: /tmp/nuxeo_dc_interactive.yml
      vars:
        nuxeo_type: "interactive"

    - name: "Create Nuxeo Deployment Config interactive"
      shell: oc create --filename=/tmp/nuxeo_dc_interactive.yml
  when: 
    - cluster == "openshift"
    - state == "present"

- name: "Nuxeo Deployment Config interactive={{ state }}"
  shell: oc delete --ignore-not-found=true dc {{ interactive_dc_name }} -n {{ namespace }}
  when:
    - cluster == "openshift"
    - state == "absent"


- name: "Nuxeo Deployment Config worker state={{ state }}"
  block:
    - name: "Create Nuxeo Deployment config from template"
      template:
        src: nuxeo_dc.yml.j2
        dest: /tmp/nuxeo_dc_worker.yml
      vars:
        nuxeo_type: "worker"

    - name: "Create Nuxeo Deployment Config worker"
      shell: oc create --filename=/tmp/nuxeo_dc_worker.yml
  when: 
    - cluster == "openshift"
    - state == "present"

- name: "Nuxeo Deployment Config worker={{ state }}"
  shell: oc delete --ignore-not-found=true dc {{ worker_dc_name }} -n {{ namespace }}
  when:
    - cluster == "openshift"
    - state == "absent"


- name: "Update last operation"
  asb_last_operation:
    description: "50%: Cluster objects state={{ state }}"
  when: in_cluster

- include_tasks: "verify_{{ apb_action }}.yml"

- name: "Update last operation"
  asb_last_operation:
    description: "100%: Done"
  when: in_cluster
